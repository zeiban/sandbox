{"ts":1340769847924,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\n\nvar blockSize = 1.0;\n\n\nvar camera = new Camera();\ncamera.transform.position.x = 0;\ncamera.transform.position.y = 0;\ncamera.transform.position.z = 4;\n\n\nconsole.log(camera.transform.position[2]);\n\n\nvar map = {\n    width:8,\n    height:8,\n    data:\n    [\n        1,1,1,1,1,1,1,1,\n        1,0,0,0,0,0,0,1,\n        1,0,0,0,0,0,0,1,\n        1,0,0,0,0,0,0,1,\n        1,0,0,0,0,0,0,1,\n        1,0,0,0,0,0,0,1,\n        1,0,0,0,0,0,0,1,\n        1,1,1,1,1,1,1,1\n    ]\n};\n\nfunction isPointInWall(v) {\n    var x = Math.floor(v.x / blockSize);\n    var y = Math.floor(v.z / blockSize);\n    x = Math.min(Math.max(0,x),map.width-1);\n    y = Math.min(Math.max(0,y),map.height-1);\n    \n    if(map.data[y * map.width + x] == 1) {\n        return true;\n    } else {\n        return false;\n    }\n}    \nconsole.log(map.width);\nconsole.log(map.height);\nwindow.requestAnimFrame = (function() {\n  return window.requestAnimationFrame ||\n         window.webkitRequestAnimationFrame ||\n         window.mozRequestAnimationFrame ||\n         window.oRequestAnimationFrame ||\n         window.msRequestAnimationFrame ||\n         function(/* function FrameRequestCallback */ callback, /* DOMElement Element */ element) {\n           window.setTimeout(callback, 1000/60);\n         };\n})();\n\n\nvar vertexPositionAttribute;\nfunction loadShaders() {\n    var fragmentShader = getShader(gl,'shader-fs;');\n    var vertexShader = getShader(gl,'shader-vs;');\n    \n    var program = gl.createProgram();\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    \n    if(!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n        alert(\"Unable to initialize shader program\");\n    }\n    gl.useProgram(program);\n    vertexPositionAttribute = gl.getAttributeLocation(program, \"aVertexPosition\");\n    gl.enableVertexAttribArray(vertexPositionAttribute);\n}\nvar perspectiveMatrix;\nvar gl;\nfunction render() {\n    gl.clearColor(Math.random(),Math.random(),Math.random(),1);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    perspectiveMatrix = makePerspective(45,640.0/480.0,0.1,100.0);\n}\nfunction initGL() {\n    try {\n        document.\n        gl = canvas.getContext(\"experimental\") || canvas.getContext(\"experimental-webgl\");\n        gl.viewportWidth = canvas.width;\n        gl.viewportHeight = canvas.height;\n    } catch (e) {\n    }\n    if (!gl) {\n        alert(\"Could not initialise WebGL, sorry :-(\");\n    }\n}\n\nfunction getShader(gl, id) {\n    var shaderScript = document.getElementById(id);\n    if (!shaderScript) {\n        return null;\n    }\n\n    var str = \"\";\n    var k = shaderScript.firstChild;\n    while (k) {\n        if (k.nodeType == 3) {\n            str += k.textContent;\n        }\n        k = k.nextSibling;\n    }\n\n    var shader;\n    if (shaderScript.type == \"x-shader/x-fragment\") {\n        shader = gl.createShader(gl.FRAGMENT_SHADER);\n    } else if (shaderScript.type == \"x-shader/x-vertex\") {\n        shader = gl.createShader(gl.VERTEX_SHADER);\n    } else {\n        return null;\n    }\n\n    gl.shaderSource(shader, str);\n    gl.compileShader(shader);\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        alert(gl.getShaderInfoLog(shader));\n        return null;\n    }\n\n    return shader;\n}\n\nvar shaderProgram;\n\nfunction initShaders(){\n    var  fragmentShader = getShader(gl, \"shader-fs\");\n    var  vertexShader = getShader(gl, \"shader-vs\");\n    shaderProgram = gl.createProgram();\n    gl.attachShader(shaderProgram, vertexShader);\n    gl.attachShader(shaderProgram, fragmentShader);\n    gl.linkProgram(shaderProgram);\n\n    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n        alert(\"Could not initialise shaders\");\n    }\n\n    gl.useProgram(shaderProgram);\n\n    shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, \"aVertexPosition\");\n    gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);\n\n    shaderProgram.textureCoordAttribute = gl.getAttribLocation(shaderProgram, \"aTextureCoord\");\n    gl.enableVertexAttribArray(shaderProgram.textureCoordAttribute);\n\n    shaderProgram.pMatrixUniform = gl.getUniformLocation(shaderProgram, \"uPMatrix\");\n    shaderProgram.mvMatrixUniform = gl.getUniformLocation(shaderProgram, \"uMVMatrix\");\n    shaderProgram.samplerUniform = gl.getUniformLocation(shaderProgram, \"uSampler\");    \n}\n\nfunction handleLoadedTexture(texture) {\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, texture.image);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n}\n\nvar wallTexture;\nvar floorTexture;\n\nfunction initTextures() {\n    wallTexture = gl.createTexture();\n    wallTexture.image = new Image();\n    wallTexture.image.onload = function () {\n        handleLoadedTexture(wallTexture)\n    }\n\n    wallTexture.image.src = \"assets/wall.png\";\n\n    floorTexture = gl.createTexture();\n    floorTexture.image = new Image();\n    floorTexture.image.onload = function () {\n        handleLoadedTexture(floorTexture)\n    }\n\n    floorTexture.image.src = \"assets/floor.png\";\n}\nvar mvMatrix = mat4.create();\nvar mvMatrixStack = [];\nvar pMatrix = mat4.create();\n\nfunction mvPushMatrix() {\n    var copy = mat4.create();\n    mat4.set(mvMatrix, copy);\n    mvMatrixStack.push(copy);\n}\n\nfunction mvPopMatrix() {\n    if (mvMatrixStack.length === 0) {\n        throw \"Invalid popMatrix!\";\n    }\n    mvMatrix = mvMatrixStack.pop();\n}\n\nfunction setMatrixUniforms() {\n    gl.uniformMatrix4fv(shaderProgram.pMatrixUniform, false, pMatrix);\n    gl.uniformMatrix4fv(shaderProgram.mvMatrixUniform, false, mvMatrix);\n}\n\nfunction degToRad(degrees) {\n    return degrees * Math.PI / 180;\n}\nvar Mesh = {};\nMesh.Primitive = {\n    Lines:0,\n    Triangles:1\n};\n\nvar axis =  {\n    primitive:Mesh.Primitive.Lines,\n    position:[0, 0, 0, 1, 0, 0,\n              0, 0, 0, 0, 1, 0,\n              0, 0, 0, 0, 0, 1],\n    color:[1,0,0,\n           1,0,0,\n           0,1,0,\n           0,1,0,\n           0,0,1,\n           0,0,1],\n    texcoords:[],\n    indexes:[]\n};\n\nfunction convertToGL(primitive){\n    switch(primitive) {\n        case Mesh.Primitive.Lines:\n            return gl.LINES;\n        case Mesh.Primitive.Trianges:\n            return gl.TRIANGLES;\n    }\n}\n\nfunction renderMesh(mesh) {\n    if(mesh.position.length > 0 && mesh.positionBuffer === undefined) {\n        mesh.positionBuffer = gl.createBuffer();\n//        mesh.positionBuffer.itemSize = 3;\n//        mesh.positionBuffer.numItems = mesh.position.length / 3;\n        gl.bindBuffer(gl.ARRAY_BUFFER,mesh.positionBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(mesh.position), gl.STATIC_DRAW);\n    }\n    if(mesh.color.length > 0 && mesh.colorBuffer === undefined) {\n        mesh.colorBuffer = gl.createBuffer();\n//        mesh.positionBuffer.itemSize = 3;\n//        mesh.positionBuffer.numItems = mesh.position.length / 3;\n        gl.bindBuffer(gl.ARRAY_BUFFER,mesh.positionBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(mesh.color), gl.STATIC_DRAW);\n    }\n\n    if(mesh.indexes.length > 0 && mesh.indexBuffer == undefined) {\n        mesh.indexBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,mesh.indexBuffer);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(mesh.indexes), gl.STATIC_DRAW);\n    }\n    \n    var mode = convertToGL(mesh.primitive);\n    if(mesh.indexes.length > 0 ) {\n        gl.drawElements(mode, mesh.indexes.length, gl.UNSIGNED_SHORT, 0);\n    } else {\n        var count =0;\n        switch(mode) {\n            case gl.LINES:\n                count = mesh.position.length / 2;\n                break;\n            case gl.TRIANGLES:\n                count = mesh.position.length / 3;\n                break;\n        }\n        gl.drawArrays(mode, 0, count);\n    }\n}\n\nvar mapVertexPositionBuffer;\nvar mapVertexTextureCoordBuffer;\nvar mapVertexIndexBuffer;\n\nfunction initBuffers() {\n    var x, y;\n    var vertices = [];\n    var texCoords = [];\n    var indexes = [];\n    var indexOffset=0;\n\n    var xOffset = 0;\n    var yOffset = 0;\n//    var xOffset = map.width * -0.5;\n//    var yOffset = map.height * -0.5;\n    \n    for(y=0; y<map.height; y++) {\n        for(x=0; x<map.width; x++) {\n            if(map.data[y*map.width+x] === 0) {\n                /*\n                vertices.push(x,0,y);\n                vertices.push(x+1,0,y);\n                vertices.push(x,0,y+1);\n                vertices.push(x+1,0,y+1);\n                */\n                /*\n                v1------v2\n                |      / |\n                |    /   |\n                |  /     |\n                v3------v4\n                */\n                //Floor Vertices\n                var fv1 = new Vector3(xOffset+x, -0.5, yOffset+y);\n                var fv2 = new Vector3(xOffset+x+1, -0.5, yOffset+y);\n                var fv3 = new Vector3(xOffset+x, -0.5, yOffset+y+1);\n                var fv4 = new Vector3(xOffset+x+1, -0.5, yOffset+y+1);\n                \n                //Celing Vertices\n                var cv1 = new Vector3(xOffset+x, 0.5, yOffset+y);\n                var cv2 = new Vector3(xOffset+x+1, 0.5, yOffset+y);\n                var cv3 = new Vector3(xOffset+x, 0.5, yOffset+y+1);\n                var cv4 = new Vector3(xOffset+x+1, 0.5, yOffset+y+1);\n                // floor\n                vertices.push(fv1.x, fv1.y, fv1.z);\n                vertices.push(fv2.x, fv2.y, fv2.z);\n                vertices.push(fv3.x, fv3.y, fv3.z);\n                vertices.push(fv4.x, fv4.y, fv4.z);\n                /*\n                vertices.push(xOffset+x,-0.5,yOffset+y);\n                vertices.push(xOffset+x+1,-0.5,yOffset-y-1);\n                vertices.push(xOffset+x,-0.5,yOffset-y-1);\n                */\n                texCoords.push(0.0,0.0);\n                texCoords.push(1.0,0.0);\n                texCoords.push(0.0,1.0);\n                texCoords.push(1.0,1.0);\n\n                indexes.push(indexOffset,indexOffset+1,indexOffset+2);\n                indexes.push(indexOffset+2,indexOffset+1,indexOffset+3);\n                indexOffset+=4;\n\n                //Celing\n                vertices.push(xOffset+x,0.5,yOffset-y);\n                vertices.push(xOffset+x+1,0.5,yOffset-y);\n                vertices.push(xOffset+x,0.5,yOffset-y-1);\n                vertices.push(xOffset+x+1,0.5,yOffset-y-1);\n                \n\n                texCoords.push(0.0,0.0);\n                texCoords.push(1.0,0.0);\n                texCoords.push(0.0,1.0);\n                texCoords.push(1.0,1.0);\n\n                indexes.push(indexOffset,indexOffset+1,indexOffset+2);\n                indexes.push(indexOffset+2,indexOffset+1,indexOffset+3);\n                indexOffset+=4;\n                \n                //West Wall\n                if(x == 0 || map.data[y*map.width+(x-1)] == 1) {\n                    vertices.push(xOffset+x,0.5,yOffset-y);\n                    vertices.push(xOffset+x,0.5,yOffset-y-1);\n                    vertices.push(xOffset+x,-0.5,yOffset-y);\n                    vertices.push(xOffset+x,-0.5,yOffset-y-1);\n\n                    texCoords.push(0.0,0.0);\n                    texCoords.push(1.0,0.0);\n                    texCoords.push(0.0,1.0);\n                    texCoords.push(1.0,1.0);\n\n                    indexes.push(indexOffset,indexOffset+1,indexOffset+2);\n                    indexes.push(indexOffset+2,indexOffset+1,indexOffset+3);\n                    indexOffset+=4;\n                }\n                //East Wall\n                if(x == map.width-1 || map.data[y*map.width+(x+1)] == 1) {\n                    vertices.push(xOffset+x+1,0.5,yOffset-y-1);\n                    vertices.push(xOffset+x+1,0.5,yOffset-y);\n                    vertices.push(xOffset+x+1,-0.5,yOffset-y-1);\n                    vertices.push(xOffset+x+1,-0.5,yOffset-y);\n\n                    texCoords.push(0.0,0.0);\n                    texCoords.push(1.0,0.0);\n                    texCoords.push(0.0,1.0);\n                    texCoords.push(1.0,1.0);\n\n                    indexes.push(indexOffset,indexOffset+1,indexOffset+2);\n                    indexes.push(indexOffset+2,indexOffset+1,indexOffset+3);\n                    indexOffset+=4;\n                }\n                //South Wall\n                if(y == 0 || map.data[(y-1)*map.width+x] == 1) {\n                    vertices.push(xOffset+x+1,0.5,yOffset-y);\n                    vertices.push(xOffset+x,0.5,yOffset-y);\n                    vertices.push(xOffset+x+1,-0.5,yOffset-y);\n                    vertices.push(xOffset+x,-0.5,yOffset-y);\n\n                    texCoords.push(0.0,0.0);\n                    texCoords.push(1.0,0.0);\n                    texCoords.push(0.0,1.0);\n                    texCoords.push(1.0,1.0);\n\n                    indexes.push(indexOffset,indexOffset+1,indexOffset+2);\n                    indexes.push(indexOffset+2,indexOffset+1,indexOffset+3);\n                    indexOffset+=4;\n                }\n                //North Wall\n                if(y == map.height-1 || map.data[(y+1)*map.width+x] == 1) {\n                    vertices.push(xOffset+x,0.5,yOffset-y-1);\n                    vertices.push(xOffset+x+1,0.5,yOffset-y-1);\n                    vertices.push(xOffset+x,-0.5,yOffset-y-1);\n                    vertices.push(xOffset+x+1,-0.5,yOffset-y-1);\n\n                    texCoords.push(0.0,0.0);\n                    texCoords.push(1.0,0.0);\n                    texCoords.push(0.0,1.0);\n                    texCoords.push(1.0,1.0);\n\n                    indexes.push(indexOffset,indexOffset+1,indexOffset+2);\n                    indexes.push(indexOffset+2,indexOffset+1,indexOffset+3);\n                    indexOffset+=4;\n                }\n            }\n        }\n    }\n    mapVertexPositionBuffer = gl.createBuffer();\n    mapVertexPositionBuffer.itemSize = 3;\n    mapVertexPositionBuffer.numItems = vertices.length / 3;\n    gl.bindBuffer(gl.ARRAY_BUFFER,mapVertexPositionBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);\n    \n    mapVertexTextureCoordBuffer = gl.createBuffer();\n    mapVertexTextureCoordBuffer.itemSize = 2;\n    mapVertexTextureCoordBuffer.numItems = texCoords.length / 2;\n    gl.bindBuffer(gl.ARRAY_BUFFER,mapVertexTextureCoordBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(texCoords), gl.STATIC_DRAW);\n\n    mapVertexIndexBuffer = gl.createBuffer();\n    mapVertexIndexBuffer.itemSize = 1;\n    mapVertexIndexBuffer.numItems = indexes.length;\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, mapVertexIndexBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexes), gl.STATIC_DRAW);\n    /*\n    var cubeVertexIndices = [\n        0, 1, 2,      0, 2, 3,    // Front face\n        4, 5, 6,      4, 6, 7,    // Back face\n        8, 9, 10,     8, 10, 11,  // Top face\n        12, 13, 14,   12, 14, 15, // Bottom face\n        16, 17, 18,   16, 18, 19, // Right face\n        20, 21, 22,   20, 22, 23  // Left face\n    ];\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, mapVertexIndexBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(mapVertexIndices), gl.STATIC_DRAW);\n    \n    cubeVertexPositionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);\n    var vertices = [\n        // Front face\n        -1.0, -1.0,  1.0,\n         1.0, -1.0,  1.0,\n         1.0,  1.0,  1.0,\n        -1.0,  1.0,  1.0,\n\n        // Back face\n        -1.0, -1.0, -1.0,\n        -1.0,  1.0, -1.0,\n         1.0,  1.0, -1.0,\n         1.0, -1.0, -1.0,\n\n        // Top face\n        -1.0,  1.0, -1.0,\n        -1.0,  1.0,  1.0,\n         1.0,  1.0,  1.0,\n         1.0,  1.0, -1.0,\n\n        // Bottom face\n        -1.0, -1.0, -1.0,\n         1.0, -1.0, -1.0,\n         1.0, -1.0,  1.0,\n        -1.0, -1.0,  1.0,\n\n        // Right face\n         1.0, -1.0, -1.0,\n         1.0,  1.0, -1.0,\n         1.0,  1.0,  1.0,\n         1.0, -1.0,  1.0,\n\n        // Left face\n        -1.0, -1.0, -1.0,\n        -1.0, -1.0,  1.0,\n        -1.0,  1.0,  1.0,\n        -1.0,  1.0, -1.0\n    ];\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);\n    cubeVertexPositionBuffer.itemSize = 3;\n    cubeVertexPositionBuffer.numItems = 24;\n\n    cubeVertexTextureCoordBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexTextureCoordBuffer);\n    var textureCoords = [\n      // Front face\n      0.0, 0.0,\n      1.0, 0.0,\n      1.0, 1.0,\n      0.0, 1.0,\n\n      // Back face\n      1.0, 0.0,\n      1.0, 1.0,\n      0.0, 1.0,\n      0.0, 0.0,\n\n      // Top face\n      0.0, 1.0,\n      0.0, 0.0,\n      1.0, 0.0,\n      1.0, 1.0,\n\n      // Bottom face\n      1.0, 1.0,\n      0.0, 1.0,\n      0.0, 0.0,\n      1.0, 0.0,\n\n      // Right face\n      1.0, 0.0,\n      1.0, 1.0,\n      0.0, 1.0,\n      0.0, 0.0,\n\n      // Left face\n      0.0, 0.0,\n      1.0, 0.0,\n      1.0, 1.0,\n      0.0, 1.0\n    ];\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoords), gl.STATIC_DRAW);\n    cubeVertexTextureCoordBuffer.itemSize = 2;\n    cubeVertexTextureCoordBuffer.numItems = 24;\n\n    cubeVertexIndexBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);\n    var cubeVertexIndices = [\n        0, 1, 2,      0, 2, 3,    // Front face\n        4, 5, 6,      4, 6, 7,    // Back face\n        8, 9, 10,     8, 10, 11,  // Top face\n        12, 13, 14,   12, 14, 15, // Bottom face\n        16, 17, 18,   16, 18, 19, // Right face\n        20, 21, 22,   20, 22, 23  // Left face\n    ];\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(cubeVertexIndices), gl.STATIC_DRAW);\n    cubeVertexIndexBuffer.itemSize = 1;\n    cubeVertexIndexBuffer.numItems = 36;\n    */\n}\n\nvar xRot = 0;\nvar yRot = 0;\nvar zRot = 0;\nvar camyrot=0;\nvar camxrot=0;\nfunction drawScene() {\n    gl.viewport(0,0,canvas.width, canvas.height);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    \n    mat4.perspective(45, canvas.width / canvas.height, 0.1, 100.0, pMatrix);\n    \n    camera.transform.rotation.fromAxisAngle(Vector3.Y, camyrot);\n    mat4.identity(mvMatrix);\n    var rotation = quat4.create([\n        camera.transform.rotation.x,\n        camera.transform.rotation.y,\n        camera.transform.rotation.z,\n        camera.transform.rotation.w\n        ]);\n    //quat4.toMat4(rotation, mvMatrix);\n//    mat4.rotate(mvMatrix, degToRad(camyrot), [0, 1, 0]);\n//    mat4.rotate(mvMatrix, degToRad(camxrot), [1, 0, 0]);\n    var mymat = new Matrix4();\n    var f32array = new Float32Array(16); \n    \n    var forward = mymat.right();\n//    position.add(forward.scale(2));\n//    camera.transform.position.add(new Vector3(0,0,1));\n    mymat.setTranslation(camera.transform.position);\n    mymat.toArray(f32array);\n    mvMatrix = f32array;   \n    /*\n    mat4.identity(mvMatrix);\n    mat4.translate(mvMatrix, [camera.transform.position.x, camera.transform.position.y, camera.transform.position.z]);\n    if(keys[Input.Keys.D] === true) {\n        console.log(\"mat4\");\n        console.log(mvMatrix);\n    }\n    */\n//    mat4.rotate(mvMatrix, degToRad(xRot), [1, 0, 0]);\n//    mat4.rotate(mvMatrix, degToRad(yRot), [0, 1, 0]);\n//    mat4.rotate(mvMatrix, degToRad(zRot), [0, 0, 1]);\n    \n    gl.bindBuffer(gl.ARRAY_BUFFER, mapVertexPositionBuffer);\n    gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, mapVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);\n    \n    gl.bindBuffer(gl.ARRAY_BUFFER, mapVertexTextureCoordBuffer);\n    gl.vertexAttribPointer(shaderProgram.textureCoordAttribute, mapVertexTextureCoordBuffer.itemSize, gl.FLOAT, false, 0, 0);\n    \n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, wallTexture);\n    gl.uniform1i(shaderProgram.samplerUniform, 0);\n    \n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, mapVertexIndexBuffer);\n    setMatrixUniforms();\n    gl.drawElements(gl.TRIANGLES, mapVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);\n    \n    renderMesh(axis);\n}\n\nvar lastTime = 0;\nvar deltaTime = 0;\nvar startTime = 0;\nvar elapsedTime = 0;\nfunction animate() {\n    var timeNow = new Date().getTime();\n    if(startTime === 0) {\n        startTime = timeNow;\n    }\n    elapsedTime = (timeNow - startTime)/1000;\n    \n    if (lastTime !== 0) {\n        deltaTime = (timeNow - lastTime)/1000;\n\n    }\n    lastTime = timeNow;\n}\nvar fps = document.getElementById('fps');\n\nvar bx = document.getElementById('bx');\nvar by = document.getElementById('by');\n\nvar cx = document.getElementById('cx');\nvar cy = document.getElementById('cy');\nvar cz = document.getElementById('cz');\n\nvar nextFPSUpdate = 0;\nfunction checkCollision(){\n    \n    if(elapsedTime > nextFPSUpdate) {\n        fps.innerHTML = Math.round((1/deltaTime));   \n        nextFPSUpdate = elapsedTime + 1.0;\n    }\n    bx.innerHTML = Math.floor(camera.transform.position.x / blockSize);    \n    by.innerHTML = Math.floor(camera.transform.position.z / blockSize);\n\n    cx.innerHTML = camera.transform.position.x;    \n    cy.innerHTML = camera.transform.position.y;\n    cz.innerHTML = (camera.transform.position.z).toString().substring(0,6);\n//    if(map.data[blockY* map.width * blockX])\n//    */\n}\n\nfunction tick() {\n    window.requestAnimFrame(tick);\n    drawScene();\n    animate();\n    handleInput();\n    checkCollision();\n}\nvar canvas;\n\nfunction initGL() {\n    canvas = document.createElement(\"canvas\");\n    resizeCanvas();\n    document.body.appendChild(canvas);\n    try {\n        gl = canvas.getContext(\"webgl\") || canvas.getContext(\"experimental-webgl\");\n        //gl.viewportWidth = canvas.width;\n        //gl.viewportHeight = canvas.height;\n    } catch (e) {\n    }\n    if (!gl) {\n        alert(\"Could not initialise WebGL, sorry :-(\");\n    }\n}  \nfunction resizeCanvas(){\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n}\nvar keys = {};\nfunction keyDown() {\n    keys[event.keyCode] = true;\n    console.log(String.fromCharCode(event.keyCode));\n}\n\nfunction keyUp(){\n    keys[event.keyCode] = false;\n    console.log(String.fromCharCode(event.keyCode));\n}\nvar Input = {};\nInput.Keys = {};\n\nInput.Keys.A    = 65;\nInput.Keys.W    = 87;\nInput.Keys.S    = 83;\nInput.Keys.D    = 68;\nInput.Keys.UP   = 38;\nInput.Keys.DOWN = 40;\nInput.Keys.LEFT = 37;\nInput.Keys.RIGHT = 39;\n\nvar speed = 1.0;\n\nfunction handleInput() {\n    var currentPosiiton = camera.transform.position.clone();\n    var newPosition = camera.transform.position.clone();\n    if(keys[Input.Keys.W] === true) {\n        newPosition.addSelf(camera.transform.forward().multiplyScalar(speed * deltaTime));\n    }\n    if(keys[Input.Keys.S] === true) {\n        newPosition.subtractSelf(camera.transform.forward().multiplyScalar(speed * deltaTime));\n    }\n    if(keys[Input.Keys.A] === true) {\n        newPosition.addSelf(camera.transform.right().multiplyScalar(speed * deltaTime));\n    }\n    if(keys[Input.Keys.D] === true) {\n        newPosition.subtractSelf(camera.transform.right().multiplyScalar(speed * deltaTime));\n    }\n\n    if(isPointInWall(newPosition) !== true) {\n        camera.transform.position = newPosition;\n    }\n    \n    if(keys[Input.Keys.LEFT] === true) {\n        camyrot -= 0.50;\n    }\n    if(keys[Input.Keys.RIGHT] === true) {\n        camyrot += 0.50;\n    }\n\n    if(keys[Input.Keys.UP] === true) {\n        camxrot += 0.50;\n    }\n    if(keys[Input.Keys.DOWN] === true) {\n        camxrot -= 0.50;\n    }\n}\nvar lastMouseX, lastMouseY;\nvar deltaMouseX, deltaMouseY;\nfunction onMouseMove(){\n    deltaMouseX = event.clientX - lastMouseX;\n    deltaMouseY = event.clientY - lastMouseY;\n}\nfunction onMouseDown(){\n    lastMouseX = event.clientX;\n    lastMouseY = event.clientY;\n}\nfunction onMouseUp(){\n}\nwindow.addEventListener('resize', resizeCanvas, false);\nwindow.addEventListener('keydown', keyDown, false);\nwindow.addEventListener('keyup', keyUp, false);\nwindow.addEventListener('mousemove', onMouseMove, false);\nwindow.addEventListener('mousedown', onMouseDown, false);\nwindow.addEventListener('mouseup', onMouseUp, false);\n\ninitGL();\ninitShaders();\ninitBuffers();\ninitTextures();\ngl.clearColor(1.0,0.0,0.0,1.0);\ngl.enable(gl.DEPTH_TEST);\ngl.enable(gl.CULL_FACE);\ngl.cullFace(gl.BACK);\ngl.frontFace(gl.CW);\ntick();\n\nfunction load(url, callback) {\n    var xhr = new XMLHttpRequest();\n    var length = 0;\n    xhr.onreadystatechange = function(){\n        if(xhr.readyState === xhr.DONE) {\n            if(xhr.status === 200 || xhr.status === 0) {\n                if(xhr.responseText) {\n                    var  json = JSON.parse(xhr.responseText);\n                    console.log(json);\n                    \n                } else {\n                    console.warn(\"Http Request Failed\");\n                }\n            } else {\n                console.error( \"Couldn't load [\" + url + \"] [\" + xhr.status + \"]\" );\n            }\n        } else if( xhr.readyState === xhr.LOADING) {\n            if(progressCallback) {\n                if(length === 0) {\n                    length  = xhr.getResponseHeader(\"Content-Length\");\n                }\n                progressCallback();\n            }\n        } else if( xhr.readyState === xhr.HEADERS_RECEIVED) {\n            length = xhr.getResponseHeader(\"Content-Length\");\n        }\n    };\n    xhr.open(\"GET\",url, true);\n    xhr.setRequestHeader( \"Content-Type\", \"text/plain\" );\n    xhr.send(null);\n}\n\nload(\"assets/materials/color.material\");\n//canvas.webkitRequestFullScreen(); \n\n"]],"start1":0,"start2":0,"length1":0,"length2":25347}]],"length":25347}
